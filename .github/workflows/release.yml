name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run full validation
      run: npm run validate

    - name: Build project
      run: npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.7.3
        ports:
          - 8182:8182

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Wait for Gremlin server to be ready
      run: ./scripts/wait-for-gremlin.sh

    - name: Run integration tests
      env:
        GREMLIN_ENDPOINT: localhost:8182/g
      run: npm run test:it

  publish:
    needs: [test, integration-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update package version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"
        if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
          npm version $TAG_VERSION --no-git-tag-version
        else
          echo "Version already matches tag: $TAG_VERSION"
        fi

    - name: Build project
      run: npm run build

    - name: Publish to npm
      run: |
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"
        if [[ "$TAG_VERSION" =~ ^0\.0\. ]]; then
          # Publish snapshot versions to dev tag
          npm publish --provenance --access public --tag dev
        else
          # Publish stable versions to latest tag
          npm publish --provenance --access public
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false